{"version":3,"sources":["components/Formulario.js","components/Cancion.js","components/InfoArtista.js","App.js","serviceWorker.js","index.js"],"names":["Formulairo","consultarApiLetra","useState","artista","cancion","busqueda","agregarBusqueda","actualizarState","e","target","name","value","onSubmit","preventDefault","className","type","class","placeholder","onChange","Cancion","letra","InfoArtista","info","Object","keys","length","src","strArtistThumb","alt","App","agregarArtista","agregarLetra","agregarInfo","a","url","axios","resultado","data","lyrics","consultarApiInfo","artists","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"idAuCeA,MArCf,YAA0C,IAArBC,EAAoB,EAApBA,kBAAoB,EAEDC,mBAAS,CACzCC,QAAS,GACTC,QAAS,KAJwB,mBAE9BC,EAF8B,KAEpBC,EAFoB,KAO/BC,EAAkB,SAAAC,GACpBF,E,yVAAgB,CAAD,GACRD,EADQ,eAEVG,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UAWnC,OACI,0BAAMC,SAPW,SAAAJ,GACjBA,EAAEK,iBAEFZ,EAAkBI,IAIYS,UAAU,sCACpC,yBAAKA,UAAU,mBACX,2BAAOC,KAAK,OAAOC,MAAM,eAAeN,KAAK,UAAUO,YAAY,uBAAuBC,SAAUX,KAGxG,yBAAKO,UAAU,mBACX,2BAAOC,KAAK,OAAOC,MAAM,eAAeN,KAAK,UAAUO,YAAY,mBAAmBC,SAAUX,KAGpG,4BAAQQ,KAAK,SAASD,UAAU,mCAAhC,YCvBGK,MARf,YAA0B,IAARC,EAAO,EAAPA,MACd,OACI,2BACKA,ICQEC,MAXf,YAA6B,IAAPC,EAAM,EAANA,KAElB,OAAkC,IAA7BC,OAAOC,KAAKF,GAAMG,OAAsB,KAGzC,2BACI,yBAAKX,UAAU,YAAYY,IAAKJ,EAAKK,eAAgBC,IAAI,mB,gBCoDtDC,MAtDf,WAAgB,IAAD,EAEqB3B,mBAAS,IAF9B,mBAENC,EAFM,KAEG2B,EAFH,OAGiB5B,mBAAS,IAH1B,mBAGNkB,EAHM,KAGCW,EAHD,OAIe7B,mBAAS,IAJxB,mBAINoB,EAJM,KAIAU,EAJA,KAMP/B,EAAiB,uCAAG,WAAMI,GAAN,qBAAA4B,EAAA,6DACjB9B,EAAmBE,EAAnBF,QAAQC,EAAWC,EAAXD,QACT8B,EAFkB,oCAEiB/B,EAFjB,YAE4BC,GAF5B,SAGA+B,IAAMD,GAHN,OAGlBE,EAHkB,OAKxBN,EAAe3B,GACf4B,EAAaK,EAAUC,KAAKC,QANJ,2CAAH,sDAUjBC,EAAgB,uCAAG,8BAAAN,EAAA,0DAEnB9B,EAFmB,uBAGf+B,EAHe,4DAG4C/B,GAH5C,SAIGgC,IAAMD,GAJT,OAIfE,EAJe,OAKrBJ,EAAYI,EAAUC,KAAKG,QAAQ,IALd,2CAAH,qDAgBtB,OANAC,qBACE,WACEF,MACA,CAACpC,IAIH,yBAAKW,UAAU,aACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,2BAAd,uBAEA,kBAAC,EAAD,CAAYb,kBAAmBA,IAE/B,yBAAKa,UAAU,cACb,yBAAKA,UAAU,SACd,kBAAC,EAAD,CAAaQ,KAAMA,KAEpB,yBAAKR,UAAU,SACb,kBAAC,EAAD,CAASM,MAAOA,SCtCRsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e58a25b.chunk.js","sourcesContent":["import React, { useState  } from 'react';\r\n\r\nfunction Formulairo({consultarApiLetra}) {\r\n\r\n    const [busqueda, agregarBusqueda] = useState({\r\n        artista: '',\r\n        cancion: ''\r\n    });\r\n\r\n    const actualizarState = e => {\r\n        agregarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        })\r\n        \r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        consultarApiLetra(busqueda);\r\n    }\r\n\r\n    return ( \r\n        <form onSubmit={handleSubmit} className=\"row col-12 mb-5 pb-5 border-bottom\" >\r\n            <div className=\"col-12 col-lg-4\">\r\n                <input type=\"text\" class=\"form-control\" name=\"artista\" placeholder=\"Banda. Ej: Metallica\" onChange={actualizarState} />            \r\n            </div>\r\n    \r\n            <div className=\"col-12 col-lg-4\">\r\n                <input type=\"text\" class=\"form-control\" name=\"cancion\" placeholder=\"Cancion. Ej: One\" onChange={actualizarState}  />\r\n            </div>\r\n\r\n            <button type=\"submit\" className=\"col-12 col-lg-4 btn btn-primary\" >Buscar</button>\r\n        </form>\r\n        );\r\n\r\n}\r\n \r\nexport default Formulairo;","import React from 'react';\r\n\r\nfunction Cancion({letra}){\r\n    return(\r\n        <p>\r\n            {letra}\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default Cancion;","import React from 'react';\r\n\r\nfunction InfoArtista({info}){\r\n\r\n    if ( Object.keys(info).length === 0 ) return null;\r\n\r\n    return(\r\n        <p>\r\n            <img className=\"img-fluid\" src={info.strArtistThumb} alt=\"logo artista\" />\r\n        </p>\r\n    )       \r\n}\r\n\r\nexport default InfoArtista;\r\n","import React, { useState, useEffect  }  from 'react';\nimport Formulairo from './components/Formulario';\nimport Cancion from './components/Cancion';\nimport InfoArtista from './components/InfoArtista';\nimport axios from 'axios';\n\nfunction App() {\n\n  const [artista, agregarArtista] = useState('');\n  const [letra, agregarLetra] = useState([]); \n  const [info, agregarInfo] = useState({});\n\n  const consultarApiLetra = async busqueda => {\n    const {artista,cancion} = busqueda;\n    const url = `https://api.lyrics.ovh/v1/${artista}/${cancion}`;\n    const resultado = await axios(url);\n\n    agregarArtista(artista);\n    agregarLetra(resultado.data.lyrics);\n\n  }\n\n  const consultarApiInfo = async () => {\n\n    if (artista) {\n      const url = `https://theaudiodb.com/api/v1/json/1/search.php?s=${artista}`;\n      const resultado = await axios(url);  \n      agregarInfo(resultado.data.artists[0]);\n    }\n\n  }\n\n  useEffect(\n    () => {\n      consultarApiInfo();\n    },[artista]\n  )\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h1 className=\"col-12 my-4 text-center\">Letras de Canciones</h1>\n\n        <Formulairo consultarApiLetra={consultarApiLetra} />      \n\n        <div className=\"col-12 row\">\n          <div className=\"col-6\">\n           <InfoArtista info={info} />\n          </div>\n          <div className=\"col-6\">\n            <Cancion letra={letra} />\n          </div>\n            \n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}